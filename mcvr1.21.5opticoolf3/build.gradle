plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.20-RC2'
    id('fabric-loom') version '1.10-SNAPSHOT'
    id('maven-publish')
    id('checkstyle')
}

def generatedVersionDir = layout.buildDirectory.dir("generated-version")

version(project.mod_version)
group(project.maven_group)

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }

    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }

    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }

    maven { url 'https://maven.wispforest.io/releases/' }
    maven { url "https://api.modrinth.com/maven" }

    flatDir {
        dirs 'libs'
    }
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation include("net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}")

    modImplementation include("io.github.cottonmc:LibGui:${project.libgui_version}")

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.4.1")))

    modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    // modImplementation("maven.modrinth:modmenu-badges-lib:${project.modmenu_badges_lib_version}")

    modImplementation(files("libs/modmenu-badges-lib_fabric_MC_1.21.4-2025.3.28.jar"))

    modCompileOnly("maven.modrinth:betterf3:${project.betterf3_version}")
    modCompileOnly("maven.modrinth:fancymenu:${project.fancymenu_version}")
    modCompileOnly("maven.modrinth:konkrete:${project.konkrete_version}")

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    implementation include("com.squareup.okhttp3:okhttp:5.0.0-alpha.14")
    // https://mvnrepository.com/artifact/com.squareup.okio/okio
    implementation include("com.squareup.okio:okio:3.10.2")
    // https://mvnrepository.com/artifact/com.puppycrawl.tools/checkstyle
    implementation include("com.puppycrawl.tools:checkstyle:10.21.4")

    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib-jdk8
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.20-RC2'

    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    include(compileOnly(annotationProcessor("org.projectlombok:lombok:1.18.36")))
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    include(testCompileOnly(testAnnotationProcessor("org.projectlombok:lombok:1.18.36")))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.findProperty("minecraft_version")

    filesMatching(["fabric.mod.json", "version.json"]) {
        expand(
                "version": inputs.properties["version"],
                "minecraft_version": inputs.properties["minecraft_version"]
        )
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

tasks.register('generateVersionProperties') {
    doLast {
        def propertiesFile = generatedVersionDir.get().file("mcversionrenamer.version.properties").asFile
        propertiesFile.parentFile.mkdirs()

        def properties = new Properties()
        properties.setProperty("version", project.version.toString())

        propertiesFile.withWriter { writer ->
            properties.store(writer, null)
        }
    }
}

tasks.named("processResources") {
    dependsOn generateVersionProperties
}

processResources {
    filesMatching(['**/*.json']) {
        expand([version: version])
    }
}

checkstyle {
    toolVersion = '10.21.4'
    config = resources.text.fromFile('config/checkstyle/checkstyle.xml')
    maxErrors = 0
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    main {
        resources.srcDir(generatedVersionDir)
    }
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}"}
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    repositories {
    }
}